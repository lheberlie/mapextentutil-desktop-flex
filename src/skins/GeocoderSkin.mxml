<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (c) 2013 ESRI

     All rights reserved under the copyright laws of the United States
     and applicable international laws, treaties, and conventions.

     You may freely redistribute and use this sample code, with or
     without modification, provided you include the original copyright
     notice and use restrictions.

     See use restrictions in use_restrictions.txt.
-->
<!---
     The default skin class for the Geocoder component.
     <p><b>Since:</b> ArcGIS API 3.2 for Flex</p>
-->
<s:SparkSkin xmlns:mx="library://ns.adobe.com/flex/mx"
             xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
             xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabledStates="0.5"
             blendMode="normal">

    <!-- host component -->
    <fx:Metadata>
        [HostComponent("com.esri.ags.components.Geocoder")]
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
            import mx.core.FlexVersion;

            [Bindable]
            [Embed(source="./assets/skins/loader_white.swf")]
            private var loader:Class;
            [Bindable]
            [Embed(source="./assets/skins/clear-cross-12.png")]
            private var clear:Class;

            private var paddingChanged:Boolean;

            /* Define the skin elements that should not be colorized. */
            static private const exclusions:Array = [ "background", "textDisplay", "promptDisplay", "clearButton", "swfLoader", "border", "popUpAnchor" ];

            /* exclusions before Flex 4.5 for backwards-compatibility purposes */
            static private const exclusions_4_0:Array = [ "background", "textDisplay", "promptDisplay", "swfLoader", "clearButton", "popUpAnchor" ];

            /**
             * @private
             */
            override public function get colorizeExclusions():Array
            {
                // Since border is styleable via borderColor, no need to allow chromeColor to affect
                // the border.  This is wrapped in a compatibility flag since this change was added  
                // in Flex 4.5
                if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
                {
                    return exclusions_4_0;
                }

                return exclusions;
            }

            /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
            static private const contentFill:Array = [ "bgFill" ];

            /**
             *  @private
             */
            override public function get contentItems():Array
            {
                return contentFill;
            }

            /**
             *  @private
             */
            override protected function commitProperties():void
            {
                super.commitProperties();

                if (paddingChanged)
                {
                    updatePadding();
                    paddingChanged = false;
                }
            }

            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }

            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
            {
                if (getStyle("borderVisible") == true)
                {
                    border.visible = true;
                    shadow.visible = true;
                    background.left = background.top = background.right = background.bottom = 1;
                    textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
                    textDisplay.right = 20;
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
                        promptDisplay.setLayoutBoundsPosition(1, 1);
                    }
                }
                else
                {
                    border.visible = false;
                    shadow.visible = false;
                    background.left = background.top = background.right = background.bottom = 0;
                    textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
                    textDisplay.right = 20;
                    if (promptDisplay)
                    {
                        promptDisplay.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                        promptDisplay.setLayoutBoundsPosition(0, 0);
                    }
                }

                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");

                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }

            /**
             *  @private
             */
            private function updatePadding():void
            {
                if (!textDisplay)
                {
                    return;
                }

                // Push padding styles into the textDisplay
                var padding:Number;

                padding = getStyle("paddingLeft");
                if (textDisplay.getStyle("paddingLeft") != padding)
                {
                    textDisplay.setStyle("paddingLeft", padding);
                }

                padding = getStyle("paddingTop");
                if (textDisplay.getStyle("paddingTop") != padding)
                {
                    textDisplay.setStyle("paddingTop", padding);
                }

                padding = getStyle("paddingRight");
                if (textDisplay.getStyle("paddingRight") != padding)
                {
                    textDisplay.setStyle("paddingRight", padding);
                }

                padding = getStyle("paddingBottom");
                if (textDisplay.getStyle("paddingBottom") != padding)
                {
                    textDisplay.setStyle("paddingBottom", padding);
                }

                if (!promptDisplay)
                {
                    return;
                }

                padding = getStyle("paddingLeft");
                if (promptDisplay.getStyle("paddingLeft") != padding)
                {
                    promptDisplay.setStyle("paddingLeft", padding);
                }

                padding = getStyle("paddingTop");
                if (promptDisplay.getStyle("paddingTop") != padding)
                {
                    promptDisplay.setStyle("paddingTop", padding);
                }

                padding = getStyle("paddingRight");
                if (promptDisplay.getStyle("paddingRight") != padding)
                {
                    promptDisplay.setStyle("paddingRight", padding);
                }

                padding = getStyle("paddingBottom");
                if (promptDisplay.getStyle("paddingBottom") != padding)
                {
                    promptDisplay.setStyle("paddingBottom", padding);
                }
            }

            /**
             *  @private
             */
            override public function styleChanged(styleProp:String):void
            {
                var allStyles:Boolean = !styleProp || styleProp == "styleName";

                super.styleChanged(styleProp);

                if (allStyles || styleProp.indexOf("padding") == 0)
                {
                    paddingChanged = true;
                    invalidateProperties();
                }
            }

            /**
             * @private
             */
            private function isClearButtonShown(text:String):Boolean
            {
                return (hostComponent.clearButtonVisible && text.length);
            }
        ]]>
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="normal"/>
        <s:State name="searching" stateGroups="searchingAndShowingResults"/>
        <s:State name="showingSearchResults" stateGroups="showing, searchingAndShowingResults"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>

    <s:Rect id="border"
            left="0" right="0" top="0" bottom="0"
            radiusX="5">
        <s:stroke>
            <s:SolidColorStroke id="borderStroke" weight="1"/>
        </s:stroke>
    </s:Rect>

    <s:Rect id="background"
            left="1" right="1" top="1" bottom="1"
            radiusX="5">
        <s:fill>
            <s:SolidColor id="bgFill" color="0x1F467E"/>
        </s:fill>
    </s:Rect>

    <s:Rect id="shadow"
            height="1"
            left="1" right="1" top="1"
            radiusX="5">
        <s:fill>
            <s:SolidColor alpha="0.12" color="0x000000"/>
        </s:fill>
    </s:Rect>

    <!-- text -->
    <!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
    <s:RichEditableText id="textDisplay"
                        left="1" right="1" top="1" bottom="1"
                        color="0xFFFFFF"
                        verticalAlign="middle"
                        widthInChars="10"/>
    <!-- prompt -->
    <!--- Defines the Label that is used for prompt text. The includeInLayout property is false so the prompt text does not affect measurement. -->
    <s:Label id="promptDisplay"
             color="0xFFFFFF"
             includeIn="normalWithPrompt,disabledWithPrompt"
             includeInLayout="false"
             maxDisplayedLines="1"
             mouseChildren="false"
             mouseEnabled="false"
             verticalAlign="middle"/>
    <!-- searching -->
    <s:SWFLoader id="swfLoader"
                 width="16" height="16"
                 right="4"
                 includeIn="searching"
                 source="{loader}"
                 verticalCenter="0"/>
    <!-- clear -->
    <s:Image id="clearButton"
             right="5"
             excludeFrom="searching, normalWithPrompt, disabledStates"
             includeInLayout="{isClearButtonShown(hostComponent.text)}"
             source="{clear}"
             verticalCenter="0"
             visible="{isClearButtonShown(hostComponent.text)}"/>
    <!-- results -->
    <s:PopUpAnchor id="popUpAnchor"
                   left="0" right="0" top="{hostComponent.height}"
                   displayPopUp="false"
                   displayPopUp.searchingAndShowingResults="true"
                   includeIn="searchingAndShowingResults"
                   popUpWidthMatchesAnchorWidth="true">
        <supportClasses:GeocoderResultList id="resultList"
                                           width="100%"
                                           focusEnabled="false"
                                           itemRenderer="skins.supportClasses.GeocoderResultListItemRenderer"
                                           searchText="{hostComponent.text}"
                                           visible="{hostComponent.searchResults.length &gt; 0}">
            <supportClasses:layout>
                <s:VerticalLayout gap="0"
                                  horizontalAlign="contentJustify"
                                  requestedRowCount="{(resultList.dataProvider.length &lt; 6) ? resultList.dataProvider.length : 6}"/>
            </supportClasses:layout>
        </supportClasses:GeocoderResultList>
    </s:PopUpAnchor>
</s:SparkSkin>
